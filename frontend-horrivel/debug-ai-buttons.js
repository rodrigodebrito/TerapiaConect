/**
 * Script de diagn√≥stico e reparo para bot√µes de IA
 * 
 * Este script pode ser executado diretamente no console para 
 * resolver problemas com os bot√µes de IA que n√£o aparecem
 */

(function() {
  console.log('üîç Iniciando diagn√≥stico de bot√µes de IA');
  
  // Registrar todos os poss√≠veis cont√™ineres de bot√µes existentes
  const allButtons = document.querySelectorAll('button');
  const aiButtons = Array.from(allButtons).filter(btn => {
    const text = btn.textContent || '';
    return text.includes('Analisar') || 
           text.includes('Sugest√µes') || 
           text.includes('Relat√≥rio');
  });
  
  console.log(`üîç Encontrados ${aiButtons.length} bot√µes de IA existentes`);
  aiButtons.forEach((btn, index) => {
    console.log(`  Bot√£o #${index + 1}: "${btn.textContent}" - Vis√≠vel: ${isVisible(btn)}`);
    console.log(`    Classe: ${btn.className}`);
    console.log(`    Pai: ${btn.parentElement?.tagName} com classe ${btn.parentElement?.className}`);
    console.log(`    Z-index computado: ${getComputedStyle(btn).zIndex}`);
    console.log(`    Visibilidade: ${getComputedStyle(btn).visibility}`);
    console.log(`    Display: ${getComputedStyle(btn).display}`);
  });
  
  // Verificar containers que podem estar escondendo os bot√µes
  const containers = document.querySelectorAll('.ai-tools-container, .ai-buttons-container, .ai-toolbar');
  console.log(`üîç Encontrados ${containers.length} cont√™ineres de bot√µes de IA`);
  containers.forEach((container, index) => {
    console.log(`  Container #${index + 1}: Classe "${container.className}" - Vis√≠vel: ${isVisible(container)}`);
    console.log(`    Z-index: ${getComputedStyle(container).zIndex}`);
    console.log(`    Position: ${getComputedStyle(container).position}`);
  });
  
  // Verificar iframe do Jitsi
  const iframes = document.querySelectorAll('iframe');
  console.log(`üîç Encontrados ${iframes.length} iframes na p√°gina`);
  iframes.forEach((iframe, index) => {
    console.log(`  Iframe #${index + 1}:`);
    console.log(`    Z-index: ${getComputedStyle(iframe).zIndex}`);
    console.log(`    Dimens√µes: ${iframe.offsetWidth}x${iframe.offsetHeight}`);
  });
  
  // Fun√ß√£o para verificar se um elemento est√° vis√≠vel
  function isVisible(element) {
    if (!element) return false;
    
    const style = window.getComputedStyle(element);
    if (style.display === 'none') return false;
    if (style.visibility !== 'visible') return false;
    if (style.opacity === '0') return false;
    
    const rect = element.getBoundingClientRect();
    if (rect.width === 0 || rect.height === 0) return false;
    
    return true;
  }
  
  console.log('üõ†Ô∏è Executando reparos...');
  
  // Remover qualquer bot√£o ou cont√™iner existente
  aiButtons.forEach(btn => {
    try {
      console.log(`  Removendo bot√£o "${btn.textContent}"`);
      if (btn.parentElement && btn.parentElement.children.length <= 3) {
        btn.parentElement.remove();
      } else {
        btn.remove();
      }
    } catch (err) {
      console.error(`  Erro ao remover bot√£o:`, err);
    }
  });
  
  containers.forEach(container => {
    try {
      console.log(`  Removendo container "${container.className}"`);
      container.remove();
    } catch (err) {
      console.error(`  Erro ao remover container:`, err);
    }
  });
  
  // Criar novos bot√µes direto no DOM (abordagem de √∫ltimo recurso)
  console.log('üèóÔ∏è Criando novos bot√µes com abordagem direta...');
  
  // Obter fun√ß√µes do contexto de AI, se dispon√≠vel
  let aiContext = null;
  if (window.__AI_CONTEXT) {
    console.log('  Usando contexto de AI global');
    aiContext = window.__AI_CONTEXT;
  }
  
  // Obter o ID da sess√£o da URL
  function getSessionId() {
    try {
      const path = window.location.pathname;
      
      // Verificar formato /sessions/ID
      const sessionMatch = path.match(/\/sessions\/([a-zA-Z0-9-]+)/);
      if (sessionMatch && sessionMatch[1]) {
        return sessionMatch[1];
      }
      
      // Verificar formato /room/session-ID
      const roomMatch = path.match(/\/room\/session-([a-zA-Z0-9-]+)/);
      if (roomMatch && roomMatch[1]) {
        return roomMatch[1];
      }
      
      // Verificar formato gen√©rico
      const genericMatch = path.match(/\/room\/([a-zA-Z0-9-]+)/);
      if (genericMatch && genericMatch[1]) {
        return genericMatch[1];
      }
    } catch (err) {
      console.error('  Erro ao extrair ID da sess√£o:', err);
    }
    return 'unknown-session';
  }
  
  // Handlers para os bot√µes
  function handleAnalyze() {
    console.log('Clique em Analisar');
    if (aiContext && aiContext.analyze) {
      aiContext.analyze(getSessionId());
    } else {
      alert('Fun√ß√£o de an√°lise n√£o est√° dispon√≠vel');
    }
  }
  
  function handleSuggest() {
    console.log('Clique em Sugest√µes');
    if (aiContext && aiContext.suggest) {
      aiContext.suggest(getSessionId());
    } else {
      alert('Fun√ß√£o de sugest√µes n√£o est√° dispon√≠vel');
    }
  }
  
  function handleReport() {
    console.log('Clique em Relat√≥rio');
    if (aiContext && aiContext.report) {
      aiContext.report(getSessionId());
    } else {
      alert('Fun√ß√£o de relat√≥rio n√£o est√° dispon√≠vel');
    }
  }
  
  // Criar e injetar bot√µes
  createAndInjectButtons();
  
  function createAndInjectButtons() {
    try {
      // Criar container
      const container = document.createElement('div');
      container.id = 'emergency-ai-buttons';
      container.style.cssText = `
        position: fixed !important;
        bottom: 80px !important;
        left: 0 !important;
        width: 100% !important;
        display: flex !important;
        justify-content: center !important;
        align-items: center !important;
        pointer-events: none !important;
        z-index: 2147483647 !important;
      `;
      
      // Criar toolbar
      const toolbar = document.createElement('div');
      toolbar.style.cssText = `
        display: flex !important;
        gap: 10px !important;
        background-color: rgba(0, 0, 0, 0.8) !important;
        border-radius: 50px !important;
        padding: 8px 16px !important;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5) !important;
        pointer-events: all !important;
      `;
      
      // Fun√ß√£o para criar um bot√£o
      function createButton(emoji, text, clickHandler) {
        const button = document.createElement('button');
        button.style.cssText = `
          background-color: #2a3e4c !important;
          color: white !important;
          border: none !important;
          border-radius: 50px !important;
          padding: 8px 16px !important;
          display: flex !important;
          align-items: center !important;
          gap: 8px !important;
          cursor: pointer !important;
          font-size: 14px !important;
          font-family: sans-serif !important;
        `;
        
        const emojiSpan = document.createElement('span');
        emojiSpan.style.fontSize = '18px';
        emojiSpan.textContent = emoji;
        
        const textSpan = document.createElement('span');
        textSpan.textContent = text;
        
        button.appendChild(emojiSpan);
        button.appendChild(textSpan);
        button.addEventListener('click', clickHandler);
        
        return button;
      }
      
      // Criar os bot√µes
      const analyzeBtn = createButton('üß†', 'Analisar', handleAnalyze);
      const suggestBtn = createButton('üí°', 'Sugest√µes', handleSuggest);
      const reportBtn = createButton('üìù', 'Relat√≥rio', handleReport);
      
      // Montar a UI
      toolbar.appendChild(analyzeBtn);
      toolbar.appendChild(suggestBtn);
      toolbar.appendChild(reportBtn);
      container.appendChild(toolbar);
      
      // Adicionar ao body
      document.body.appendChild(container);
      
      console.log('‚úÖ Bot√µes de emerg√™ncia criados com sucesso');
      return container;
    } catch (err) {
      console.error('‚ùå Erro ao criar bot√µes de emerg√™ncia:', err);
      return null;
    }
  }
  
  // Verificar se os bot√µes foram criados corretamente
  setTimeout(() => {
    const emergencyButtons = document.getElementById('emergency-ai-buttons');
    if (emergencyButtons) {
      console.log('‚úÖ Diagn√≥stico conclu√≠do - Bot√µes criados e vis√≠veis');
    } else {
      console.error('‚ùå Diagn√≥stico conclu√≠do - Falha ao injetar bot√µes');
    }
  }, 1000);
})(); 