#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { execSync } from 'child_process';

// Cores para o terminal
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  blue: '\x1b[34m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m'
};

// Obt√©m o diret√≥rio atual 
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configura√ß√£o de diret√≥rios
const srcDir = path.join(__dirname, 'src');
const distDir = path.join(__dirname, 'dist');
const routesDir = path.join(srcDir, 'routes');
const distRoutesDir = path.join(distDir, 'routes');

/**
 * Fun√ß√£o para criar um diret√≥rio se n√£o existir
 */
function ensureDirectoryExists(dir) {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
    console.log(`${colors.green}‚úÖ Diret√≥rio criado:${colors.reset} ${dir}`);
  }
}

/**
 * Fun√ß√£o para limpar o diret√≥rio de distribui√ß√£o
 */
function cleanDistDirectory() {
  console.log(`\n${colors.yellow}üßπ Limpando o diret√≥rio de distribui√ß√£o...${colors.reset}`);
  
  if (fs.existsSync(distDir)) {
    const files = fs.readdirSync(distDir, { withFileTypes: true });
    
    for (const file of files) {
      const fullPath = path.join(distDir, file.name);
      
      if (file.isDirectory()) {
        fs.rmSync(fullPath, { recursive: true, force: true });
      } else {
        fs.unlinkSync(fullPath);
      }
    }
    
    console.log(`${colors.green}‚úÖ Diret√≥rio limpo:${colors.reset} ${distDir}`);
  } else {
    ensureDirectoryExists(distDir);
  }
}

/**
 * Fun√ß√£o para compilar o c√≥digo com SWC
 */
function compileWithSWC() {
  console.log(`\n${colors.yellow}üîÑ Compilando o c√≥digo com SWC...${colors.reset}`);
  
  try {
    // Verificar se o SWC est√° dispon√≠vel
    try {
      execSync('npx swc --version', { stdio: 'ignore' });
      console.log(`${colors.green}‚úÖ SWC encontrado, usando para compila√ß√£o${colors.reset}`);
      execSync('npx swc ./src -d ./dist --ignore "**/*.cjs"', { stdio: 'inherit' });
    } catch (swcError) {
      console.log(`${colors.yellow}‚ö†Ô∏è SWC n√£o encontrado, usando m√©todo alternativo de c√≥pia...${colors.reset}`);
      // M√©todo alternativo: copiar os arquivos JS e ignorar arquivos CJS
      copyJsFiles();
    }
    console.log(`${colors.green}‚úÖ C√≥digo compilado/copiado com sucesso${colors.reset}`);
  } catch (error) {
    console.error(`${colors.red}‚ùå Erro ao processar o c√≥digo:${colors.reset}`, error.message);
    process.exit(1);
  }
}

/**
 * Fun√ß√£o alternativa para copiar arquivos JS quando SWC n√£o estiver dispon√≠vel
 */
function copyJsFiles() {
  const copyDir = (srcPath, destPath) => {
    if (!fs.existsSync(destPath)) {
      fs.mkdirSync(destPath, { recursive: true });
    }
    
    const entries = fs.readdirSync(srcPath, { withFileTypes: true });
    
    for (const entry of entries) {
      const srcFilePath = path.join(srcPath, entry.name);
      const destFilePath = path.join(destPath, entry.name);
      
      if (entry.isDirectory()) {
        // Se for o diret√≥rio de rotas, tratamento especial
        if (entry.name === 'routes') {
          // Para a pasta routes, apenas copia os arquivos .cjs (que ser√£o copiados depois)
          // Cria a pasta de destino, mas n√£o copia os arquivos agora
          if (!fs.existsSync(path.join(destPath, entry.name))) {
            fs.mkdirSync(path.join(destPath, entry.name), { recursive: true });
          }
          console.log(`${colors.blue}üîπ Diret√≥rio de rotas: arquivos .js ignorados, apenas .cjs ser√£o copiados${colors.reset}`);
        } else {
          copyDir(srcFilePath, destFilePath);
        }
      } else if (entry.name.endsWith('.js') && !entry.name.endsWith('.cjs')) {
        // N√£o copiar arquivos .js que est√£o no diret√≥rio routes
        const isInRoutesDir = srcFilePath.includes(path.join('src', 'routes'));
        if (!isInRoutesDir) {
          fs.copyFileSync(srcFilePath, destFilePath);
          console.log(`${colors.green}‚úÖ Copiado:${colors.reset} ${srcFilePath} -> ${destFilePath}`);
        } else {
          console.log(`${colors.yellow}‚ö†Ô∏è Ignorando arquivo .js em routes:${colors.reset} ${srcFilePath}`);
        }
      }
    }
  };
  
  copyDir(srcDir, distDir);
}

/**
 * Fun√ß√£o para copiar arquivos CJS diretamente para o diret√≥rio de distribui√ß√£o
 */
function copyCJSFiles() {
  console.log(`\n${colors.yellow}üìÇ Copiando arquivos .cjs para o diret√≥rio de distribui√ß√£o...${colors.reset}`);
  
  if (!fs.existsSync(routesDir)) {
    console.error(`${colors.red}‚ö†Ô∏è Diret√≥rio de rotas n√£o encontrado:${colors.reset} ${routesDir}`);
    return;
  }
  
  ensureDirectoryExists(distRoutesDir);
  
  // Obt√©m todos os arquivos .cjs do diret√≥rio de rotas
  const cjsFiles = fs.readdirSync(routesDir).filter(file => file.endsWith('.cjs'));
  
  if (cjsFiles.length === 0) {
    console.log(`${colors.red}‚ö†Ô∏è Nenhum arquivo .cjs encontrado em:${colors.reset} ${routesDir}`);
    return;
  }
  
  console.log(`${colors.blue}üîç Encontrados ${cjsFiles.length} arquivos .cjs para copiar${colors.reset}`);
  
  // Para debug: lista todos os arquivos nos diret√≥rios
  console.log(`${colors.magenta}üîç Conte√∫do do diret√≥rio de origem (${routesDir}):${colors.reset}`);
  fs.readdirSync(routesDir).forEach(file => console.log(`  - ${file}`));
  
  console.log(`${colors.magenta}üîç Conte√∫do do diret√≥rio de destino antes da c√≥pia (${distRoutesDir}):${colors.reset}`);
  if (fs.existsSync(distRoutesDir)) {
    fs.readdirSync(distRoutesDir).forEach(file => console.log(`  - ${file}`));
  } else {
    console.log(`  (diret√≥rio n√£o existe)`);
  }
  
  for (const file of cjsFiles) {
    const srcFile = path.join(routesDir, file);
    const destFile = path.join(distRoutesDir, file);
    
    try {
      // Verifica√ß√µes adicionais
      if (!fs.existsSync(srcFile)) {
        console.error(`${colors.red}‚ùå Arquivo de origem n√£o existe:${colors.reset} ${srcFile}`);
        continue;
      }
      
      fs.copyFileSync(srcFile, destFile);
      console.log(`${colors.green}‚úÖ Copiado:${colors.reset} ${file}`);
      
      // Verifica√ß√£o ap√≥s c√≥pia
      if (fs.existsSync(destFile)) {
        const size = fs.statSync(destFile).size;
        console.log(`${colors.green}   ‚Üí Verificado: ${destFile} (${size} bytes)${colors.reset}`);
      } else {
        console.error(`${colors.red}‚ùå Verifica√ß√£o falhou: arquivo n√£o existe ap√≥s c√≥pia: ${destFile}${colors.reset}`);
      }
    } catch (error) {
      console.error(`${colors.red}‚ùå Erro ao copiar ${file}:${colors.reset}`, error.message);
    }
  }
  
  // Verifica√ß√£o final do conte√∫do do diret√≥rio de destino
  console.log(`${colors.magenta}üîç Conte√∫do do diret√≥rio de destino ap√≥s a c√≥pia (${distRoutesDir}):${colors.reset}`);
  if (fs.existsSync(distRoutesDir)) {
    fs.readdirSync(distRoutesDir).forEach(file => console.log(`  - ${file}`));
  } else {
    console.log(`  (diret√≥rio n√£o existe)`);
  }
}

/**
 * Fun√ß√£o para copiar outros arquivos est√°ticos (se necess√°rio)
 */
function copyStaticFiles() {
  console.log(`\n${colors.yellow}üìÇ Copiando arquivos est√°ticos...${colors.reset}`);
  
  // Criar diret√≥rio de uploads
  const uploadsDir = path.join(distDir, 'uploads');
  ensureDirectoryExists(uploadsDir);
  console.log(`${colors.green}‚úÖ Diret√≥rio de uploads criado${colors.reset}`);
  
  // Arquivos est√°ticos a serem copiados
  const staticFiles = [
    { source: '.env', dest: path.join(distDir, '.env') },
    { source: 'prisma/schema.prisma', dest: path.join(distDir, 'prisma/schema.prisma') }
  ];
  
  for (const file of staticFiles) {
    try {
      const sourcePath = path.join(__dirname, file.source);
      const destPath = file.dest;
      
      // Certifica-se de que o diret√≥rio de destino existe
      const destDir = path.dirname(destPath);
      if (!fs.existsSync(destDir)) {
        fs.mkdirSync(destDir, { recursive: true });
      }
      
      if (fs.existsSync(sourcePath)) {
        fs.copyFileSync(sourcePath, destPath);
        console.log(`${colors.green}‚úÖ Copiado:${colors.reset} ${file.source} -> ${destPath}`);
      } else {
        console.log(`${colors.yellow}‚ö†Ô∏è Arquivo n√£o encontrado:${colors.reset} ${file.source}`);
      }
    } catch (error) {
      console.error(`${colors.red}‚ùå Erro ao copiar ${file.source}:${colors.reset}`, error.message);
    }
  }
  
  console.log(`${colors.green}‚úÖ Arquivos est√°ticos copiados${colors.reset}`);
}

/**
 * Fun√ß√£o principal
 */
function build() {
  console.log(`\n${colors.magenta}üöÄ Iniciando processo de build...${colors.reset}`);
  
  // Limpar diret√≥rio dist
  cleanDistDirectory();
  
  // Compilar c√≥digo com SWC
  compileWithSWC();
  
  // Copiar arquivos CJS
  copyCJSFiles();
  
  // Copiar outros arquivos est√°ticos
  copyStaticFiles();
  
  console.log(`\n${colors.magenta}üéâ Build conclu√≠do com sucesso!${colors.reset}`);
}

// Executa o build
build();