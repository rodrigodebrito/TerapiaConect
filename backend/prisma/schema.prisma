generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  name      String
  role      UserRole
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  client    Client?
  therapist Therapist?
}

model Therapist {
  id                  String          @id @default(uuid())
  userId              String          @unique
  education           String?
  experience          String?
  sessionDuration     Int             @default(60)
  isApproved          Boolean         @default(false)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  baseSessionPrice    Float?
  customNiches        Json?
  customTools         Json?
  differential        String?
  niches              Json?
  profilePicture      String?
  servicePrices       Json?
  shortBio            String?
  targetAudience      String?
  address             String?
  attendanceMode      String          @default("ONLINE")
  city                String?
  freeSessionDuration Int?
  neighborhood        String?
  offersFreeSession   Boolean         @default(false)
  state               String?
  zipCode             String?
  appointments        Appointment[]
  availability        Availability[]
  sessions            Session[]
  user                User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  tools               TherapistTool[]
}

model Client {
  id             String        @id @default(uuid())
  userId         String        @unique
  preferences    Json?
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  freeSessions   Int           @default(0)
  birthDate      DateTime?
  city           String?
  complement     String?
  gender         String?
  neighborhood   String?
  number         String?
  phone          String?
  profilePicture String?
  state          String?
  street         String?
  zipCode        String?
  appointments   Appointment[]
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessions       Session[]
}

model Tool {
  id           String          @id
  name         String
  duration     Int             @default(60)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  description  String?
  price        Float           @default(0)
  appointments Appointment[]
  therapists   TherapistTool[]
}

model Appointment {
  id          String    @id @default(uuid())
  therapistId String
  clientId    String
  date        String
  notes       String?
  duration    Int
  toolId      String
  mode        String
  price       Float
  time        String
  status      String    @default("SCHEDULED")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  client      Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  therapist   Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  tool        Tool      @relation(fields: [toolId], references: [id])
  sessions    Session[]
}

model Availability {
  id          String    @id @default(uuid())
  therapistId String
  dayOfWeek   Int
  startTime   String
  endTime     String
  isRecurring Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  date        String?
  therapist   Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TherapistTool {
  therapistId String
  toolId      String
  price       Float     @default(0)
  duration    Int       @default(60)
  therapist   Therapist @relation(fields: [therapistId], references: [id])
  tool        Tool      @relation(fields: [toolId], references: [id])

  @@id([therapistId, toolId])
}

model Session {
  id                      String              @id @default(uuid())
  appointmentId           String
  therapistId             String
  clientId                String
  title                   String?
  status                  SessionStatus       @default(SCHEDULED)
  startTime               DateTime?
  endTime                 DateTime?
  scheduledDuration       Int
  actualDuration          Int?
  notes                   String?
  shareInsightsWithClient Boolean             @default(true)
  toolsUsed               Json?
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  dyteMeetingId           String?
  dyteRoomName            String?
  insights                AIInsight[]
  appointment             Appointment         @relation(fields: [appointmentId], references: [id])
  client                  Client              @relation(fields: [clientId], references: [id])
  therapist               Therapist           @relation(fields: [therapistId], references: [id])
  reports                 SessionReport[]
  transcripts             SessionTranscript[]
}

model SessionTranscript {
  id        String   @id @default(uuid())
  sessionId String
  speaker   String
  content   String
  timestamp DateTime @default(now())
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model AIInsight {
  id        String   @id @default(uuid())
  sessionId String
  content   String
  type      String
  keywords  String?
  timestamp DateTime @default(now())
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model SessionReport {
  id          String   @id @default(uuid())
  sessionId   String
  content     String
  generatedBy String
  timestamp   DateTime @default(now())
  session     Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model TrainingMaterial {
  id                   String   @id @default(uuid())
  title                String
  content              String
  type                 String
  categories           String[]
  videoUrl             String?
  isVideoTranscription Boolean  @default(false)
  documentPath         String?
  documentName         String?
  documentType         String?
  insights             String?
  embedding            Json?
  status               String   @default("pending")
  userId               String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([userId])
  @@index([categories])
  @@index([status])
  @@index([type])
}

enum UserRole {
  ADMIN
  THERAPIST
  CLIENT
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum SessionStatus {
  SCHEDULED
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}
