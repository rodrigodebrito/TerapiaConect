// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelos

enum UserRole {
  ADMIN
  THERAPIST
  CLIENT
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações
  therapist Therapist?
  client    Client?
}

model Therapist {
  id                String   @id @default(uuid())
  userId            String   @unique
  shortBio          String?  @db.Text
  bio               String?  @db.Text
  niches            String?  @db.Text // JSON string de especialidades
  customNiches      String?  @db.Text // JSON string de especialidades personalizadas
  education         String?  @db.Text
  experience        String?  @db.Text
  targetAudience    String?  @db.Text // JSON string de públicos-alvo
  differential      String?  @db.Text
  baseSessionPrice  Float?
  servicePrices     String?  @db.Text // JSON string de preços por serviço
  sessionDuration   Int      @default(60) // Em minutos
  profilePicture    String?
  attendanceMode    String   @default("BOTH") // ONLINE, PRESENTIAL, BOTH
  city              String?
  state             String?
  offersFreeSession Boolean  @default(false)
  freeSessionDuration Int?
  rating            Float?   @default(0)
  isApproved        Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relações
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments  Appointment[]
  availability  Availability[]
  tools         TherapistTool[]
  packages      Package[]
}

model Client {
  id          String   @id @default(uuid())
  userId      String   @unique
  preferences Json?    // Array de preferências
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relações
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments Appointment[]
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Appointment {
  id          String            @id @default(uuid())
  therapistId String
  clientId    String
  toolId      String           // ID da ferramenta usada
  toolName    String           // Nome da ferramenta (para caso seja personalizada)
  duration    Int              // Duração em minutos
  date        DateTime
  endDate     DateTime
  status      AppointmentStatus @default(PENDING)
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relações
  therapist   Therapist         @relation(fields: [therapistId], references: [id])
  client      Client            @relation(fields: [clientId], references: [id])
}

model Availability {
  id          String   @id @default(uuid())
  therapistId String
  dayOfWeek   Int      // 0-6 (Domingo-Sábado)
  startTime   String   // Formato HH:MM
  endTime     String   // Formato HH:MM
  isRecurring Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relações
  therapist   Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TherapistTool {
  id          String   @id @default(uuid())
  therapistId String
  toolId      String   // ID da ferramenta (predefinida ou customizada)
  name        String   // Nome da ferramenta
  isCustom    Boolean  @default(false)
  duration    Int      // Duração em minutos
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relações
  therapist   Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  packages    Package[]
}

model Package {
  id            String   @id @default(uuid())
  therapistId   String
  toolId        String
  name          String
  description   String?
  sessionCount  Int
  price         Float
  validityDays  Int     // Validade em dias
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relações
  therapist     Therapist     @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  tool          TherapistTool @relation(fields: [toolId], references: [id], onDelete: Cascade)
}
