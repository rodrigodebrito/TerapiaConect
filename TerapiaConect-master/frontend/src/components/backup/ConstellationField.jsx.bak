import React, { useRef, useState, useEffect, useMemo, useCallback } from 'react';
import { Canvas, useFrame, useLoader, useThree } from '@react-three/fiber';
import { OrbitControls, Html, useGLTF } from '@react-three/drei';
import * as THREE from 'three';
import { TextureLoader } from 'three';
import './ConstellationField.css';

// Cores para os representantes
const REPRESENTATIVE_COLORS = [
  '#4285F4', '#EA4335', '#FBBC05', '#34A853',
  '#FF6D01', '#46BDC6', '#9C27B0', '#795548'
];

// Componente para o campo de constelação
const ConstellationField = ({ isHost = true, sessionId = null, fieldTexture = '/assets/field-texture.svg' }) => {
  const [representatives, setRepresentatives] = useState([]);
  const [selectedRepresentative, setSelectedRepresentative] = useState(null);
  const [representativeName, setRepresentativeName] = useState('');
  const [hasControl, setHasControl] = useState(isHost);
  const [isDraggingAny, setIsDraggingAny] = useState(false);
  const [showDragHint, setShowDragHint] = useState(false);
  
  // Referência ao socket para comunicação em tempo real
  const socketRef = useRef(null);
  
  // Inicializar a conexão socket quando o componente montar
  useEffect(() => {
    // Comentado até implementar backend
    /*
    if (sessionId) {
      socketRef.current = io('http://localhost:3000', {
        query: { sessionId }
      });
      
      socketRef.current.on('connect', () => {
        console.log('Conectado ao servidor');
      });
      
      socketRef.current.on('representativesMoved', (updatedRepresentatives) => {
        setRepresentatives(updatedRepresentatives);
      });
      
      socketRef.current.on('controlTransferred', (newController) => {
        setHasControl(newController === socketRef.current.id);
      });
      
      return () => {
        socketRef.current.disconnect();
      };
    }
    */
  }, [sessionId]);
  
  // Gerar uma cor baseada no índice
  const getColorForIndex = (index) => {
    return REPRESENTATIVE_COLORS[index % REPRESENTATIVE_COLORS.length];
  };
  
  // Adicionar um novo representante
  const addRepresentative = () => {
    if (representativeName.trim() === '') return;
    
    const newRepresentative = {
      id: `rep-${Date.now()}`,
      name: representativeName,
      position: [Math.random() * 4 - 2, 0, Math.random() * 4 - 2], // Área menor para posicionamento
      color: getColorForIndex(representatives.length),
      isControlled: false
    };
    
    setRepresentatives(prev => [...prev, newRepresentative]);
    setRepresentativeName('');
    
    // Emit via socket
    // if (socketRef.current) {
    //   socketRef.current.emit('representativeAdded', newRepresentative);
    // }
  };
  
  // Selecionar um representante para mover
  const handleRepresentativeClick = (id) => {
    console.log(`Selecionando representante: ${id}, hasControl: ${hasControl}`);
    if (!hasControl) return;
    
    if (id === selectedRepresentative) {
      setSelectedRepresentative(null);
    } else {
      setSelectedRepresentative(id);
    }
  };
  
  // Atualizar a posição de um representante
  const setRepresentativePosition = (id, position) => {
    if (!hasControl) return;
    
    console.log(`Atualizando posição do representante ${id} para:`, position);
    
    const updatedRepresentatives = representatives.map(rep => 
      rep.id === id ? { ...rep, position } : rep
    );
    
    setRepresentatives(updatedRepresentatives);
    
    // Emit via socket
    // if (socketRef.current) {
    //   socketRef.current.emit('representativesMoved', updatedRepresentatives);
    // }
  };
  
  // Atualizar o estado de arrastar
  const setDraggingState = (isDragging) => {
    setIsDraggingAny(isDragging);
  };
  
  // Transferir o controle
  const transferControl = () => {
    setHasControl(false);
    
    // Emit via socket
    // if (socketRef.current) {
    //   socketRef.current.emit('transferControl', 'client');
    // }
  };
  
  // Salvar a configuração atual
  const saveConfiguration = () => {
    console.log('Configuração salva:', representatives);
    // Implementar lógica para salvar no backend
  };
  
  // Mostrar dica de arrastar quando selecionar um representante
  useEffect(() => {
    if (selectedRepresentative) {
      setShowDragHint(true);
      const timer = setTimeout(() => {
        setShowDragHint(false);
      }, 3000);
      return () => clearTimeout(timer);
    }
  }, [selectedRepresentative]);
  
  return (
    <div className="constellation-field-container">
      <div className="constellation-controls">
        {hasControl && (
          <>
            <div className="control-status">
              <div className="status-indicator"></div>
              <span>Você tem o controle</span>
            </div>
            
            <button className="control-button" onClick={transferControl}>
              Passar Controle ao Cliente
            </button>
            
            <div className="add-representative-form">
              <input
                type="text"
                value={representativeName}
                onChange={(e) => setRepresentativeName(e.target.value)}
                placeholder="Nome do representante"
              />
              <button onClick={addRepresentative}>
                Adicionar
              </button>
            </div>
            
            <div className="representative-list">
              <h4>Representantes</h4>
              <ul>
                {representatives.map((rep) => (
                  <li 
                    key={rep.id}
                    className={selectedRepresentative === rep.id ? 'selected' : ''}
                    onClick={() => handleRepresentativeClick(rep.id)}
                  >
                    <div 
                      className="color-indicator" 
                      style={{ backgroundColor: rep.color }}
                    ></div>
                    <span>{rep.name}</span>
                  </li>
                ))}
              </ul>
            </div>
            
            <button 
              className="save-button"
              onClick={saveConfiguration}
              disabled={representatives.length === 0}
            >
              Salvar Constelação
            </button>
          </>
        )}
        
        {!hasControl && (
          <div className="control-status observer">
            <div className="status-indicator"></div>
            <span>Você está como observador</span>
          </div>
        )}
      </div>
      
      <div className="canvas-container" style={{ position: 'relative', width: '100%', height: '100%', overflow: 'hidden' }}>
        <Canvas 
          shadows 
          camera={{ position: [0, 5, 8], fov: 45 }}
          style={{ background: 'transparent' }}
        >
          <color attach="background" args={['#ffffff']} />
          <fog attach="fog" args={['#ffffff', 10, 20]} />
          <ambientLight intensity={0.8} />
          <directionalLight
            position={[3, 5, 3]}
            intensity={1}
            castShadow
            shadow-mapSize-width={1024}
            shadow-mapSize-height={1024}
          />
          <pointLight position={[-3, 5, -3]} intensity={0.6} />
          <Field 
            fieldTexture={fieldTexture} 
            representatives={representatives}
            selectedRepresentative={selectedRepresentative}
            onSelectionChange={handleRepresentativeClick}
            onPositionChange={setRepresentativePosition}
            onDragChange={setDraggingState}
            canMove={hasControl}
          />
          <OrbitControls 
            makeDefault
            enablePan={false}
            maxPolarAngle={Math.PI / 2.2}
            minPolarAngle={Math.PI / 6}
            enableRotate={!isDraggingAny}
            maxDistance={15}
            minDistance={3}
            enabled={!isDraggingAny}  // Desabilita completamente durante arrasto
          />
        </Canvas>
        
        {showDragHint && (
          <div className="drag-hint" style={{ 
            position: 'absolute', 
            bottom: '20px', 
            left: '50%', 
            transform: 'translateX(-50%)',
            backgroundColor: 'rgba(0,0,0,0.7)', 
            color: 'white',
            padding: '8px 16px',
            borderRadius: '4px',
            zIndex: 10,
            pointerEvents: 'none'
          }}>
            Clique e arraste o representante para movê-lo
          </div>
        )}
      </div>
    </div>
  );
};

// Componente para o campo (plano) com textura
const Field = ({ 
  fieldTexture, 
  representatives, 
  selectedRepresentative, 
  onSelectionChange, 
  onPositionChange,
  onDragChange,
  canMove 
}) => {
  // Carregar a textura
  const texture = useLoader(TextureLoader, fieldTexture);
  
  // Referência ao plano
  const planeRef = useRef();
  
  // Configuração da textura para ficar melhor
  useEffect(() => {
    if (texture) {
      texture.wrapS = THREE.RepeatWrapping;
      texture.wrapT = THREE.RepeatWrapping;
      texture.repeat.set(1, 1);
      texture.needsUpdate = true;
    }
  }, [texture]);
  
  return (
    <group>
      {/* Plano com textura */}
      <mesh 
        rotation={[-Math.PI / 2, 0, 0]} 
        position={[0, -0.01, 0]} 
        receiveShadow
        ref={planeRef}
        onClick={(e) => {
          // Garantindo que cliques no plano não afetem os representantes
          e.stopPropagation();
          onSelectionChange(null);
        }}
      >
        <planeGeometry args={[12, 12]} />
        <meshStandardMaterial 
          map={texture} 
          roughness={0.7}
          metalness={0.2}
          transparent={true}
          opacity={1}
          color="#f8f8f8"
        />
      </mesh>
      
      {/* Renderizar os representantes */}
      {representatives.map((rep) => (
        <Representative
          key={rep.id}
          position={rep.position}
          color={rep.color}
          name={rep.name}
          isSelected={selectedRepresentative === rep.id}
          onSelect={() => onSelectionChange(rep.id)}
          isControlled={rep.isControlled}
          onPositionChange={(newPosition) => onPositionChange(rep.id, newPosition)}
          canMove={canMove}
          onDragChange={onDragChange}
        />
      ))}
    </group>
  );
};

// Componente do Representante
const Representative = ({ position, color, name, isSelected, onSelect, isControlled, onPositionChange, canMove, onDragChange }) => {
  const modelPath = '/Representante/idoso - azul.glb';
  const { scene } = useGLTF(modelPath);
  const modelRef = useRef();
  const [localPosition, setLocalPosition] = useState([position[0], 0.5, position[2]]); // Ajustando a altura Y para 0.5
  const [rotation, setRotation] = useState(Math.PI); // Rotação inicial (de frente para a câmera)
  
  // Informações sobre o arrasto atual
  const dragInfo = useRef({
    isDragging: false,
    startX: 0,
    startY: 0,
    startPositionX: 0,
    startPositionZ: 0,
    startRotation: Math.PI,
    isRotating: false
  });
  
  // Clone the model to avoid cross-contamination
  const model = useMemo(() => {
    return scene.clone();
  }, [scene]);

  // Apply color to the model
  useEffect(() => {
    model.traverse((node) => {
      if (node.isMesh) {
        node.material = node.material.clone();
        node.material.color.set(color);
        
        // Apply emissive effect when selected
        if (isSelected) {
          node.material.emissive = new THREE.Color(color);
          node.material.emissiveIntensity = 0.5;
        } else {
          node.material.emissive = new THREE.Color(0x000000);
          node.material.emissiveIntensity = 0;
        }
      }
    });
  }, [model, color, isSelected]);

  // Atualizar a posição quando mudar no parent
  useEffect(() => {
    if (!dragInfo.current.isDragging) {
      // Mantém a altura Y fixa enquanto atualiza X e Z
      setLocalPosition([position[0], 0.5, position[2]]);
    }
  }, [position]);
  
  // Adjust model scale if needed
  useEffect(() => {
    if (modelRef.current) {
      modelRef.current.scale.set(0.5, 0.5, 0.5);
      modelRef.current.rotation.y = rotation;
    }
  }, [rotation]);
  
  // Atualizar rotação no frame
  useFrame(() => {
    if (modelRef.current) {
      modelRef.current.rotation.y = rotation;
    }
  });
  
  const handleMouseDown = useCallback((e) => {
    if (!canMove) return;
    
    // Parar propagação para evitar que eventos de clique afetem outros objetos
    e.stopPropagation();
    
    // Selecionar este representante
    onSelect();
    
    // Indicar que o arrasto começou
    dragInfo.current.isDragging = true;
    dragInfo.current.startX = e.clientX;
    dragInfo.current.startY = e.clientY;
    dragInfo.current.startPositionX = localPosition[0];
    dragInfo.current.startPositionZ = localPosition[2];
    dragInfo.current.startRotation = rotation;
    dragInfo.current.isRotating = false;
    
    // Adicionar eventos globais para capturar movimento e liberação do mouse
    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);
    document.addEventListener('keydown', handleKeyDown);
    document.addEventListener('keyup', handleKeyUp);
    
    // Informar ao componente pai que o arrasto começou
    onDragChange && onDragChange(true);
    
    // Mudar cursor para indicar que o objeto está sendo arrastado
    document.body.style.cursor = 'grabbing';
  }, [localPosition, rotation, canMove, onSelect, onDragChange]);
  
  const handleMouseUp = useCallback(() => {
    if (dragInfo.current.isDragging) {
      // Indicar que o arrasto terminou
      dragInfo.current.isDragging = false;
      dragInfo.current.isRotating = false;
      
      // Remover os eventos globais
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
      document.removeEventListener('keydown', handleKeyDown);
      document.removeEventListener('keyup', handleKeyUp);
      
      // Informar ao componente pai que o arrasto terminou
      onDragChange && onDragChange(false);
      
      // Restaurar o cursor padrão
      document.body.style.cursor = 'auto';
    }
  }, [onDragChange]);
  
  const handleKeyDown = useCallback((e) => {
    if (e.shiftKey && dragInfo.current.isDragging) {
      dragInfo.current.isRotating = true;
      document.body.style.cursor = 'ew-resize';
    }
  }, []);
  
  const handleKeyUp = useCallback((e) => {
    if (!e.shiftKey && dragInfo.current.isDragging) {
      dragInfo.current.isRotating = false;
      document.body.style.cursor = 'grabbing';
    }
  }, []);
  
  const handleMouseMove = useCallback((e) => {
    if (!dragInfo.current.isDragging) return;
    
    // Verificar se está no modo de rotação (shift pressionado)
    if (e.shiftKey || dragInfo.current.isRotating) {
      dragInfo.current.isRotating = true;
      // Calcular rotação (movimento horizontal do mouse)
      const deltaX = (e.clientX - dragInfo.current.startX) * 0.02;
      
      // Aplicar rotação
      const newRotation = dragInfo.current.startRotation + deltaX;
      setRotation(newRotation);
    } else {
      // Modo normal de movimentação - ajustando direções para serem intuitivas
      const deltaX = (e.clientX - dragInfo.current.startX) * 0.01; // Direção X positiva = direita
      const deltaZ = (e.clientY - dragInfo.current.startY) * 0.01; // Direção Z positiva = para trás
      
      // Calcular nova posição
      const newX = dragInfo.current.startPositionX + deltaX;
      const newZ = dragInfo.current.startPositionZ + deltaZ; 
      
      // Limitar à área do campo
      const limitedX = Math.max(-5, Math.min(5, newX));
      const limitedZ = Math.max(-5, Math.min(5, newZ));
      
      // Atualizar posição
      setLocalPosition([limitedX, 0.5, limitedZ]);
      
      // Notificar o componente pai sobre a mudança de posição
      onPositionChange([limitedX, 0, limitedZ]);
    }
  }, [onPositionChange]);
  
  // Exibir o nome do representante
  const { camera } = useThree();
  
  const nameTagPosition = useMemo(() => {
    const pos = new THREE.Vector3(localPosition[0], localPosition[1] + 1.3, localPosition[2]);
    return pos;
  }, [localPosition]);
  
  return (
    <group position={localPosition}>
      <group 
        ref={modelRef} 
        onClick={handleMouseDown}
        onPointerDown={handleMouseDown}
      >
        <primitive 
          object={model} 
          dispose={null}
          castShadow
        />
      </group>
      
      <Html position={[0, 1.3, 0]} center distanceFactor={8}>
        <div 
          style={{ 
            color: 'white', 
            background: 'rgba(0,0,0,0.7)', 
            padding: '2px 8px',
            borderRadius: '10px',
            fontWeight: isSelected ? 'bold' : 'normal',
            backdropFilter: 'blur(2px)',
            userSelect: 'none',
            whiteSpace: 'nowrap',
            fontSize: '14px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            transform: 'translateY(-50%)'
          }}
        >
          {name}
        </div>
      </Html>
    </group>
  );
};

export default ConstellationField; 